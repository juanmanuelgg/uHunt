package palindrome;

//ID: 11309
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class CountingChaos 
{
	private static BufferedReader br;
	private static boolean test=true;

	private static int[] nextPalindromo={1,2,3,4,5,6,7,8,9,11,11,22,22,22,22,22,22,22,22,22,22,22,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44,44,44,44,44,44,44,44,55,55,55,55,55,55,55,55,55,55,55,61,61,61,61,61,61,71,71,71,71,71,71,71,71,71,71,81,81,81,81,81,81,81,81,81,81,91,91,91,91,91,91,91,91,91,91,101,101,101,101,101,101,101,101,101,101,111,111,111,111,111,111,111,111,111,111,122,122,122,122,122,122,122,122,122,122,122,132,132,132,132,132,132,132,132,132,132,142,142,142,142,142,142,142,142,142,142,152,152,152,152,152,152,152,152,152,152,162,162,162,162,162,162,162,162,162,162,172,172,172,172,172,172,172,172,172,172,183,183,183,183,183,183,183,183,183,183,183,193,193,193,193,193,193,193,193,193,193,203,203,203,203,203,203,203,203,203,203,213,213,213,213,213,213,213,213,213,213,223,223,223,223,223,223,223,223,223,223,233,233,233,233,233,233,233,233,233,233,244,244,244,244,244,244,244,244,244,244,244,254,254,254,254,254,254,254,254,254,254,264,264,264,264,264,264,264,264,264,264,274,274,274,274,274,274,274,274,274,274,284,284,284,284,284,284,284,284,284,284,294,294,294,294,294,294,294,294,294,294,305,305,305,305,305,305,305,305,305,305,305,315,315,315,315,315,315,315,315,315,315,325,325,325,325,325,325,325,325,325,325,335,335,335,335,335,335,335,335,335,335,345,345,345,345,345,345,345,345,345,345,355,355,355,355,355,355,355,355,355,355,366,366,366,366,366,366,366,366,366,366,366,376,376,376,376,376,376,376,376,376,376,386,386,386,386,386,386,386,386,386,386,396,396,396,396,396,396,396,396,396,396,406,406,406,406,406,406,406,406,406,406,416,416,416,416,416,416,416,416,416,416,427,427,427,427,427,427,427,427,427,427,427,437,437,437,437,437,437,437,437,437,437,447,447,447,447,447,447,447,447,447,447,457,457,457,457,457,457,457,457,457,457,467,467,467,467,467,467,467,467,467,467,477,477,477,477,477,477,477,477,477,477,488,488,488,488,488,488,488,488,488,488,488,498,498,498,498,498,498,498,498,498,498,508,508,508,508,508,508,508,508,508,508,518,518,518,518,518,518,518,518,518,518,528,528,528,528,528,528,528,528,528,528,538,538,538,538,538,538,538,538,538,538,549,549,549,549,549,549,549,549,549,549,549,559,559,559,559,559,559,559,559,559,559,569,569,569,569,569,569,569,569,569,569,579,579,579,579,579,579,579,579,579,579,589,589,589,589,589,589,589,589,589,589,599,599,599,599,599,599,599,599,599,599,601,601,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,741,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,881,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,951,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1202,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1272,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1342,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,1412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

	public static void main(String[] args) throws IOException
	{
		if(test)br=new BufferedReader(new FileReader(new File("./data/palindrome/CountingChaos.in")));
		else br=new BufferedReader(new InputStreamReader(System.in));
		//preProcesar();
		solve();
		br.close();
	}

	private static void solve() throws IOException
	{
		int casos, horas, minutos, rta;
		casos=Integer.parseInt(br.readLine());
		String[] aux;
		
		while(casos--!=0)
		{
			aux=br.readLine().split(":");
			horas=Integer.parseInt(aux[0]);
			minutos=Integer.parseInt(aux[1]);

			rta=nextPalindromo[horas*60+minutos];
			System.out.printf("%02d:%02d\n",(rta/60)%24,rta%60);;
		}
	}

	// PreProcesar el Arreglo (int[])"nextPalindromo".
	@SuppressWarnings("unused")
	private static void preProcesar()
	{
		System.out.print("int[] siguientePalindromo={");
		boolean palindomo;
		for (int i=0, j; i<1440; i++)
		{
			palindomo=false;
			for (j=(i+1)%1440; !palindomo; j=(j+1)%1440) palindomo=evaluarPalindromidad(j);

			if(i==0) System.out.printf("%d", j-1);
			else System.out.printf(",%d", j-1);
		}
		System.out.println("};");
	}

	private static boolean evaluarPalindromidad(int j)
	{
		String base=darHora(j), filtro="";
		char[] aux=base.toCharArray(), auxFiltro;

		boolean difCero=false;
		for (int i = 0; i < aux.length; i++)
		{
			if(aux[i]!='0' && aux[i]!=':') difCero=true;
			if(difCero && aux[i]!=':') filtro+=aux[i];
		}

		auxFiltro=filtro.toCharArray();
		boolean palindromo=true;
		for (int i=0, tam=auxFiltro.length; i<tam; i++)
			if(auxFiltro[i]!=auxFiltro[tam-1-i]) palindromo=false;
		
		return palindromo;
	}
	
	private static String darHora(int i)
	{
		int hora=(int)(i/60)%24, minutos=i%60;
		String lol=(hora<10)?"0"+hora:""+hora;
		lol+=(minutos<10)?":0"+minutos:":"+minutos;
		return lol;
	}

}